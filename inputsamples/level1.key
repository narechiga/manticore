// #stablemode<M1>

/* #stablemode<M2> */
\functions{
        \external R D(R, R);
}


\schemaVariables{
        \program DLVariable #x1, #x2, #x3;
        \program DLExpression #x1prime, #x2prime, #x3prime;
        \program NormalizedOrdinaryDiffSystem #normalizedODE;

        \program DLFormula #DOE;
        \program DLFormula #DOE1;
        \program DLFormula #DOE2;
        \program DLFormula #DOE3;
        \program DLFormula #DOE4;
        \program DLFormula #DOE5;
        \program DLFormula #DOE6;
        \formula #postcondition;
        \formula #init;
        \formula #safety;

        \program DLFormula #hybridinvariant;
        \program DLProgram #dlprogram;

        \term R #someterm;
        \term R #B; //barrier function
}

\rules{
threeD_barrier_certificate_withDOE3 {
        \find( ==> \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2 & #DOE3 }\] (#postcondition) )
        \varcond(\isFirstOrderFormula( #postcondition) )
        "Initially inside barrier":
                \replacewith( ==> #B <= 0 );
        "Barrier holds":
                \replacewith( ==> #dlUniversalClosure( \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2 & #DOE3 } \]true, (#B = 0 & #DOE1 & #DOE2 & #DOE3-> D(#B, #x1)*#x1prime + D(#B, #x2)*#x2prime + D(#B, #x3)*#x3prime< -0.001), false ));
        "Barrier provides safety":
                \replacewith( ==> #dlUniversalClosure(\[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2 & #DOE3 } \]true, (#B <= 0 -> #postcondition), false ) )
                \displayname "3D Barrier Certificate with DOE"

};

threeD_barrier_certificate_withDOE2 {
        \find( ==> \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2 }\] (#postcondition) )
        \varcond(\isFirstOrderFormula( #postcondition) )
        "Initially inside barrier":
                \replacewith( ==> #B <= 0 );
        "Barrier holds":
                \replacewith( ==> #dlUniversalClosure( \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2} \]true, (#B = 0 & #DOE1 & #DOE2-> D(#B, #x1)*#x1prime + D(#B, #x2)*#x2prime + D(#B, #x3)*#x3prime< -0.001), false ));
        "Barrier provides safety":
                \replacewith( ==> #dlUniversalClosure(\[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 & #DOE2} \]true, (#B <= 0 -> #postcondition), false ) )
                \displayname "3D Barrier Certificate with DOE"

};

threeD_barrier_certificate_withDOE1 {
        \find( ==> \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1}\] (#postcondition) )
        \varcond(\isFirstOrderFormula( #postcondition) )
        "Initially inside barrier":
                \replacewith( ==> #B <= 0 );
        "Barrier holds":
                \replacewith( ==> #dlUniversalClosure( \[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1} \]true, (#B = 0 & #DOE1 -> D(#B, #x1)*#x1prime + D(#B, #x2)*#x2prime + D(#B, #x3)*#x3prime< -0.001), false ));
        "Barrier provides safety":
                \replacewith( ==> #dlUniversalClosure(\[{ #x1'=#x1prime, #x2'=#x2prime, #x3'=#x3prime & #DOE1 } \]true, (#B <= 0 -> #postcondition), false ) )
                \displayname "3D Barrier Certificate with DOE"

};
HybridCut {
        \find( ==> \[ #dlprogram* \] #safety )
        "Invariant holds":
                \replacewith( ==> #dlUniversalClosure( \[#dlprogram\]true, #hybridinvariant -> \[#dlprogram\] (#hybridinvariant), false) );
        "Invariant implies safety":
                \replacewith( ==> #dlUniversalClosure(\[#dlprogram\]true, #hybridinvariant -> #safety, false )); 
        "Remaining states are safe":
                \replacewith( ==> \[ (?(! #hybridinvariant); #dlprogram; ?(! (#hybridinvariant)))* \] #safety )
        \displayname "Hybrid cut"
};

}


\problem{
	\[ R x1, x2, x3, M, M1, M2, M7, x1_plus, x2_plus, x3_plus; 
	M1 := 1; 
	M2:= 2;
	M7:= 7;\](
	( x1^2 + x2^2 + x3^2 <= 1 ) ->
	\[(
	(?(M = M1); {
		x1' = (-x1^3 - x1*x3^2)*(x3^2 + 1), x2' = (-x2 - x1^2*x2)*(x3^2 + 1),
		x3' = (-x3 + 3*x1^2*x3)*(x3^2 + 1) - 3*x3 
		})
	++(?(M = M1); x1_plus := *; x2_plus := *; ?(x1^2 + x2^2 >= 10); ?(x1_plus^2 + x2_plus^2 < 3); x1 := x1_plus; x2 := x2_plus; M:=M2 )
	++(?(M = M2); {
		x1' = x2,
		x2' = -x1 } )
	++(?(M = M7); {
		x1' = 1, x2' = 5, x3' = x1 })


	)*\]( x1^2 + x2^2 + x3^2 < 100 )
	)
}

/* single line

( x1^2 + x2^2 + x3^2 <= 1 ) -> \[( (?(M = M1); { x1' = (-x1^3 - x1*x3^2)*(x3^2 + 1), x2' = (-x2 - x1^2*x2)*(x3^2 + 1), x3' = (-x3 + 3*x1^2*x3)*(x3^2 + 1) - 3*x3 }) ++(?(M = M1); x1_plus := *; x2_plus := *; ?(x1^2 + x2^2 >= 10); ?(x1_plus^2 + x2_plus^2 < 3); x1 := x1_plus; x2 := x2_plus; M:=M2 ) ++(?(M = M2); { x1' = x2, x2' = -x1 } ) ++(?(M = M7); { x1' = 1, x2' = 5, x3' = x1 }) 

	)*\]( x1^2 + x2^2 + x3^2 < 100 )


*/

